// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product
model Product {
  id          String      @id @default(cuid())
  name        String      @unique
  image       String
  description String?
  sizes       size?
  quantity    Int
  price       Int
  category    Category
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  deleted     Boolean     @default(false)
}

enum size {
  S
  M
  L
  XL
}

enum Category {
  TShirt
  Hoodie
  Sweatshirt
  Pants
  Shorts
  Hat
  Shoes
  Socks
}

enum Status {
  Pending
  Processing
  Paid
}

model OrderItem {
  id        String    @id @default(cuid())
  quantity  Int
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  order     Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  total      Int
  status     Status      @default(Pending)
  orderItems OrderItem[]
  payment    Payment?    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?
  paymentId  String?
}

model Payment {
  id                        String    @id @default(cuid())
  amount                    Int
  currency                  String
  status                    Status    @default(Pending)
  method                    String
  order                     Order[]
  orderId                   String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime?
  stripePaymentIntentId     String?
  stripePaymentClientSecret String?
}

// Next-Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  User
  Admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  orders        Order[]
  userType      UserType  @default(User)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
